package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/adiatma85/exp-golang-graphql/src/business/entity"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input entity.QlLogin) (entity.QlUserLoginResponse, error) {
	userJwt, err := r.Uc.User.SignInWithPassword(ctx, entity.UserLoginRequest(input))
	if err != nil {
		return entity.QlUserLoginResponse(userJwt), err
	}

	return entity.QlUserLoginResponse(userJwt), nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input entity.QlCreateUserParam) (entity.QlUser, error) {
	userRegisterReq := entity.CreateUserParam{
		Email:           input.Email,
		Username:        input.Username,
		Password:        input.Password,
		ConfirmPassword: input.ConfirmPassword,
		DisplayName:     input.DisplayName,
	}

	user, err := r.Uc.User.CreateWithoutAuthInfo(ctx, userRegisterReq)
	if err != nil {
		return entity.QlUser{}, err
	}

	return entity.QlUser{
		ID:          int(user.ID),
		Roleid:      int(user.RoleId.Int64),
		Email:       user.Email,
		Username:    input.Username,
		Displayname: user.DisplayName,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
